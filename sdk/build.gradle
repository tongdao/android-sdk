apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn: 'connectedAndroidTest') {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    jacocoClasspath = configurations['androidJacocoAnt']

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files(["${buildDir}/jacoco/testDebugUnitTest.exec",
                           "${buildDir}/outputs/code-coverage/connected/coverage.ec"
    ])
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
//        classpath 'com.android.tools.build:gradle:1.3.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

ext {
    bintrayRepo = 'maven'
    bintrayName = 'tongrd'

    publishedGroupId = 'com.tongdao.sdk'
    libraryName = 'Tongrd'
    artifact = 'tongrd'

    libraryDescription = 'A wrapper to track events'

    siteUrl = 'https://github.com/tongrd/android-sdk'
    gitUrl = 'https://github.com/tongrd/android-sdk.git'

    libraryVersion = '3.0.0'

    developerId = 'adrien'
    developerName = 'Adrien Moreau'
    developerEmail = 'adrien@tongrd.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 30200
        versionName "3.2.0"
        publishNonDefault true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
//            testCoverageEnabled = true
        }
    }
    sourceSets {
        androidTest {
            setRoot('src/androidTest')
        }
    }
    lintOptions {
        disable 'LongLogTag'
    }
    productFlavors {
        retrofit {

        }
        publish {

        }
    }
    dexOptions{
        dexInProcess = false
    }
}


task androidReleaseJar(type: Jar) {
    dependsOn 'assembleRelease'
    from "$buildDir/intermediates/classes/release/"
    exclude '**/BuildConfig.class'
    exclude '**/R.class'
    exclude '**/R$*.class'
    baseName 'tongrd-android-sdk'
    version android.defaultConfig.versionName
}



dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.0.0'
    retrofitCompile 'com.squareup.retrofit2:retrofit:2.1.0'
    retrofitCompile 'com.squareup.retrofit2:converter-gson:2.1.0'
    retrofitCompile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    androidTestCompile 'com.android.support:support-annotations:25.0.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    // Optional -- Hamcrest library
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile fileTree(include: ['*.jar'], dir: 'libs')
}

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'jar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

// bintray upload script

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

//    task javadoc(type: Javadoc) {
//        source = android.sourceSets.main.java.srcDirs
//        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

artifacts {
//    archives javadocJar
    archives sourcesJar
}

// Bintray
//Properties properties = new Properties()
//properties.load(project.rootProject.file('local.properties').newDataInputStream())

//bintray {
//    user = properties.getProperty("bintray.user")
//    key = properties.getProperty("bintray.apikey")
//
//    configurations = ['archives']
//    pkg {
//        repo = bintrayRepo
//        name = bintrayName
//        desc = libraryDescription
//        websiteUrl = siteUrl
//        vcsUrl = gitUrl
//        licenses = allLicenses
//        publish = true
//        publicDownloadNumbers = true
//        version {
//            desc = libraryDescription
//            gpg {
//                sign = true //Determines whether to GPG sign the files. The default is false
//                passphrase = properties.getProperty("bintray.gpg.password")
//                //Optional. The passphrase for GPG signing'
//            }
//        }
//    }
//}

//apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
//apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'